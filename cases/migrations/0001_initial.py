# Generated by Django 2.2.2 on 2019-06-14 19:46

import cases.models
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('django_import_data', '0010_fileimportattempt_hash'),
        ('gis', '__first__'),
        ('django_super_deduper', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True, null=True)),
                ('data_source', models.CharField(choices=[('web', 'Web'), ('excel', 'Excel'), ('access_prelim_technical', 'Access Prelim. Technical Table'), ('access_technical', 'Access Technical Table'), ('access_prelim_application', 'Access Prelim. Application Table'), ('access_application', 'Access Application Table'), ('nam_application', 'NRQZ Analyzer Application'), ('fcc_asr', 'FCC ASR Database')], default='web', help_text='The source that this object was created from', max_length=25)),
                ('path', cases.models.SensibleCharField(default=None, max_length=256, unique=True)),
                ('comments', cases.models.SensibleTextField(blank=True)),
                ('original_index', models.PositiveIntegerField(blank=True, null=True)),
                ('model_import_attempt', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='django_import_data.ModelImportAttempt')),
            ],
            options={
                'verbose_name': 'Attachment',
                'verbose_name_plural': 'Attachments',
            },
        ),
        migrations.CreateModel(
            name='Boundaries',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('name', cases.models.SensibleCharField(default=None, max_length=64, unique=True, verbose_name='Name')),
                ('bounds', django.contrib.gis.db.models.fields.PolygonField(geography=True, srid=4326, verbose_name='Bounds')),
            ],
            options={
                'verbose_name': 'Boundaries',
                'verbose_name_plural': 'Boundaries',
            },
        ),
        migrations.CreateModel(
            name='Case',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('original_created_on', models.DateTimeField(blank=True, null=True)),
                ('original_modified_on', models.DateTimeField(blank=True, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True, null=True)),
                ('data_source', models.CharField(choices=[('web', 'Web'), ('excel', 'Excel'), ('access_prelim_technical', 'Access Prelim. Technical Table'), ('access_technical', 'Access Technical Table'), ('access_prelim_application', 'Access Prelim. Application Table'), ('access_application', 'Access Application Table'), ('nam_application', 'NRQZ Analyzer Application'), ('fcc_asr', 'FCC ASR Database')], default='web', help_text='The source that this object was created from', max_length=25)),
                ('comments', cases.models.SensibleTextField(blank=True)),
                ('completed', models.BooleanField(blank=True, default=False, verbose_name='Completed')),
                ('completed_on', models.DateTimeField(blank=True, null=True, verbose_name='Completed On')),
                ('is_federal', models.BooleanField(null=True, verbose_name='Gov.')),
                ('num_freqs', models.PositiveIntegerField(blank=True, null=True, verbose_name='Num. Freq.')),
                ('num_sites', models.PositiveIntegerField(blank=True, null=True, verbose_name='Num. Facilities')),
                ('radio_service', cases.models.SensibleCharField(blank=True, max_length=256, verbose_name='Radio Service')),
                ('date_recorded', models.DateTimeField(blank=True, null=True, verbose_name='Date Recorded')),
                ('slug', models.SlugField(unique=True)),
                ('case_num', models.PositiveIntegerField(db_index=True, default=cases.models.get_case_num, unique=True, verbose_name='Case Num.')),
                ('shutdown', models.BooleanField(blank=True, default=False, verbose_name='Shut Down')),
                ('sgrs_notify', models.BooleanField(blank=True, default=False, verbose_name='SGRS Notified')),
                ('sgrs_responded_on', models.DateTimeField(blank=True, null=True, verbose_name='SGRS Responded On')),
                ('call_sign', cases.models.SensibleCharField(blank=True, max_length=256, verbose_name='Call Sign')),
                ('freq_coord', cases.models.SensibleCharField(blank=True, max_length=256, verbose_name='Freq. Coord. Num.')),
                ('fcc_file_num', cases.models.SensibleCharField(blank=True, max_length=256, verbose_name='FCC ULS Num.')),
                ('num_outside', models.PositiveIntegerField(blank=True, null=True, verbose_name='Num. Sites Outside NRQZ')),
                ('original_meets_erpd_limit', models.BooleanField(blank=True, default=False, verbose_name='Original ERPd Limit')),
                ('si_waived', models.BooleanField(blank=True, default=False, verbose_name='SI Waived')),
                ('si', models.BooleanField(blank=True, default=False, verbose_name='SI Req.')),
                ('original_si_done', models.DateField(blank=True, null=True, verbose_name='SI Done')),
                ('sgrs_service_num', models.PositiveIntegerField(blank=True, help_text='SGRS Service Num.', null=True)),
                ('agency_num', cases.models.SensibleCharField(blank=True, help_text='Agency Num.', max_length=256)),
            ],
            options={
                'verbose_name': 'Case',
                'verbose_name_plural': 'Cases',
            },
        ),
        migrations.CreateModel(
            name='LetterTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True, null=True)),
                ('name', cases.models.SensibleCharField(default=None, max_length=256, unique=True)),
                ('path', models.FilePathField(max_length=512, path='/home/sandboxes/tchamber/repos/nrqz_admin/letter_templates', unique=True)),
                ('description', cases.models.SensibleTextField(blank=True)),
            ],
            options={
                'verbose_name': 'Letter Template',
                'verbose_name_plural': 'Letter Templates',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('name', cases.models.SensibleCharField(default=None, max_length=64, unique=True, verbose_name='Name')),
                ('location', django.contrib.gis.db.models.fields.PointField(geography=True, srid=4326, verbose_name='Location')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True, null=True)),
                ('data_source', models.CharField(choices=[('web', 'Web'), ('excel', 'Excel'), ('access_prelim_technical', 'Access Prelim. Technical Table'), ('access_technical', 'Access Technical Table'), ('access_prelim_application', 'Access Prelim. Application Table'), ('access_application', 'Access Application Table'), ('nam_application', 'NRQZ Analyzer Application'), ('fcc_asr', 'FCC ASR Database')], default='web', help_text='The source that this object was created from', max_length=25)),
                ('name', cases.models.SensibleCharField(default=None, max_length=256)),
                ('phone', cases.models.SensibleCharField(blank=True, max_length=256)),
                ('fax', cases.models.SensibleCharField(blank=True, max_length=256)),
                ('email', cases.models.SensibleEmailField(blank=True, max_length=254)),
                ('street', cases.models.SensibleCharField(blank=True, max_length=256)),
                ('city', cases.models.SensibleCharField(blank=True, max_length=256)),
                ('county', cases.models.SensibleCharField(blank=True, max_length=256)),
                ('state', cases.models.SensibleCharField(blank=True, max_length=256)),
                ('zipcode', cases.models.SensibleCharField(blank=True, max_length=256)),
                ('comments', cases.models.SensibleTextField(blank=True)),
                ('merge_info', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='django_super_deduper.MergeInfo')),
                ('model_import_attempt', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='django_import_data.ModelImportAttempt')),
            ],
            options={
                'verbose_name': 'Person',
                'verbose_name_plural': 'People',
            },
        ),
        migrations.CreateModel(
            name='PreliminaryCase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('original_created_on', models.DateTimeField(blank=True, null=True)),
                ('original_modified_on', models.DateTimeField(blank=True, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True, null=True)),
                ('data_source', models.CharField(choices=[('web', 'Web'), ('excel', 'Excel'), ('access_prelim_technical', 'Access Prelim. Technical Table'), ('access_technical', 'Access Technical Table'), ('access_prelim_application', 'Access Prelim. Application Table'), ('access_application', 'Access Application Table'), ('nam_application', 'NRQZ Analyzer Application'), ('fcc_asr', 'FCC ASR Database')], default='web', help_text='The source that this object was created from', max_length=25)),
                ('comments', cases.models.SensibleTextField(blank=True)),
                ('completed', models.BooleanField(blank=True, default=False, verbose_name='Completed')),
                ('completed_on', models.DateTimeField(blank=True, null=True, verbose_name='Completed On')),
                ('is_federal', models.BooleanField(null=True, verbose_name='Gov.')),
                ('num_freqs', models.PositiveIntegerField(blank=True, null=True, verbose_name='Num. Freq.')),
                ('num_sites', models.PositiveIntegerField(blank=True, null=True, verbose_name='Num. Facilities')),
                ('radio_service', cases.models.SensibleCharField(blank=True, max_length=256, verbose_name='Radio Service')),
                ('date_recorded', models.DateTimeField(blank=True, null=True, verbose_name='Date Recorded')),
                ('slug', models.SlugField(unique=True)),
                ('case_num', models.PositiveIntegerField(db_index=True, default=cases.models.get_pcase_num, unique=True, verbose_name='Prelim. Case Num.')),
                ('applicant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='applicant_for_prelim_cases', to='cases.Person')),
                ('attachments', models.ManyToManyField(blank=True, related_name='prelim_cases', to='cases.Attachment')),
                ('case', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='prelim_cases', to='cases.Case')),
                ('contact', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contact_for_prelim_cases', to='cases.Person')),
                ('model_import_attempt', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='django_import_data.ModelImportAttempt')),
            ],
            options={
                'verbose_name': 'Preliminary Case',
                'verbose_name_plural': 'Preliminary Cases',
            },
        ),
        migrations.CreateModel(
            name='Structure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True, null=True)),
                ('data_source', models.CharField(choices=[('web', 'Web'), ('excel', 'Excel'), ('access_prelim_technical', 'Access Prelim. Technical Table'), ('access_technical', 'Access Technical Table'), ('access_prelim_application', 'Access Prelim. Application Table'), ('access_application', 'Access Application Table'), ('nam_application', 'NRQZ Analyzer Application'), ('fcc_asr', 'FCC ASR Database')], default='web', help_text='The source that this object was created from', max_length=25)),
                ('asr', models.PositiveIntegerField(db_index=True, unique=True, verbose_name='Antenna Registration Number')),
                ('file_num', cases.models.SensibleCharField(default=None, max_length=256, verbose_name='File Number')),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='A physical location on the Earth', null=True, srid=4326, verbose_name='Location')),
                ('faa_circ_num', cases.models.SensibleCharField(default=None, max_length=256, verbose_name='FAA Circulation Number')),
                ('faa_study_num', cases.models.SensibleCharField(default=None, max_length=256, verbose_name='FAA Study Number')),
                ('issue_date', models.DateField(verbose_name='Issue Date')),
                ('height', models.FloatField(verbose_name='Height (m)')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PreliminaryFacility',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('original_created_on', models.DateTimeField(blank=True, null=True)),
                ('original_modified_on', models.DateTimeField(blank=True, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True, null=True)),
                ('data_source', models.CharField(choices=[('web', 'Web'), ('excel', 'Excel'), ('access_prelim_technical', 'Access Prelim. Technical Table'), ('access_technical', 'Access Technical Table'), ('access_prelim_application', 'Access Prelim. Application Table'), ('access_application', 'Access Application Table'), ('nam_application', 'NRQZ Analyzer Application'), ('fcc_asr', 'FCC ASR Database')], default='web', help_text='The source that this object was created from', max_length=25)),
                ('nrqz_id', cases.models.SensibleCharField(blank=True, db_index=True, default=None, help_text='Assigned by NRAO. Do not put any of your data in this column.', max_length=256, verbose_name='NRQZ ID')),
                ('site_num', models.PositiveIntegerField(blank=True, help_text='???', null=True, verbose_name='Site #')),
                ('freq_low', models.FloatField(blank=True, help_text='Frequency specific or lower part of band.', null=True, verbose_name='Freq Low (MHz)')),
                ('freq_high', models.FloatField(blank=True, help_text='Frequency specific or upper part of band.', null=True, verbose_name='Freq High (MHz)')),
                ('antenna_model_number', cases.models.SensibleCharField(blank=True, help_text='Antenna Model Number', max_length=256, verbose_name='Antenna Model No.')),
                ('power_density_limit', models.FloatField(blank=True, null=True, verbose_name='Power Density Limit')),
                ('site_name', cases.models.SensibleCharField(blank=True, help_text='What you call it! Include MCN and eNB information.', max_length=256, verbose_name='Site Name')),
                ('latitude', cases.models.SensibleCharField(blank=True, help_text='Latitude of site, in degrees', max_length=256, verbose_name='Latitude')),
                ('longitude', cases.models.SensibleCharField(blank=True, help_text='Longitude of site, in degrees', max_length=256, verbose_name='Longitude')),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='A physical location on the Earth', null=True, srid=4326, verbose_name='Location')),
                ('location_description', cases.models.SensibleCharField(blank=True, help_text='A long-form description of the facility location', max_length=512, verbose_name='Geographic Location')),
                ('amsl', models.FloatField(blank=True, help_text='Facility ground elevation, in meters', null=True, verbose_name='AMSL (meters)')),
                ('agl', models.FloatField(blank=True, help_text='Facility height to center above ground level, in meters', null=True, verbose_name='AGL (meters)')),
                ('comments', cases.models.SensibleTextField(blank=True, help_text='Additional information or comments from the applicant', verbose_name='Comments')),
                ('usgs_dataset', cases.models.SensibleCharField(blank=True, choices=[('3m', '3m'), ('10m', '10m'), ('30m', '30m')], max_length=3, verbose_name='USGS Dataset')),
                ('tpa', models.FloatField(blank=True, null=True, verbose_name='TPA')),
                ('survey_1a', models.BooleanField(blank=True, null=True, verbose_name='Survey 1A')),
                ('survey_2c', models.BooleanField(blank=True, null=True, verbose_name='Survey 2C')),
                ('radio_service', cases.models.SensibleCharField(blank=True, max_length=256, verbose_name='Radio Service')),
                ('topo_4_point', models.BooleanField(blank=True, null=True, verbose_name='FCC 4 Point')),
                ('topo_12_point', models.BooleanField(blank=True, null=True, verbose_name='Weighted 12 Point')),
                ('propagation_model', cases.models.SensibleCharField(blank=True, default='Rounded Obstacle', max_length=256, verbose_name='Propagation Model')),
                ('nrao_aerpd_cdma', models.FloatField(blank=True, null=True)),
                ('nrao_aerpd_cdma2000', models.FloatField(blank=True, null=True)),
                ('nrao_aerpd_gsm', models.FloatField(blank=True, null=True)),
                ('nrao_aerpd_analog', models.FloatField(blank=True, null=True)),
                ('nrao_diff', models.FloatField(blank=True, null=True)),
                ('nrao_space', models.FloatField(blank=True, null=True)),
                ('nrao_tropo', models.FloatField(blank=True, null=True)),
                ('original_outside_nrqz', models.BooleanField(blank=True, null=True)),
                ('requested_max_erp_per_tx', cases.models.SensibleCharField(blank=True, max_length=256, verbose_name='Max ERPd per TX')),
                ('az_bearing', cases.models.SensibleCharField(blank=True, help_text='The Azimuth bearing between the Facility and the GBT, as imported from existing data', max_length=256, verbose_name='AZ bearing degrees True')),
                ('attachments', models.ManyToManyField(blank=True, related_name='prelim_facilities', to='cases.Attachment')),
                ('model_import_attempt', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='django_import_data.ModelImportAttempt')),
                ('original_srs', models.ForeignKey(help_text='The spatial reference system of the original imported coordinates', on_delete=django.db.models.deletion.PROTECT, to='gis.PostGISSpatialRefSys', verbose_name='Original Spatial Reference System')),
                ('pcase', models.ForeignKey(help_text='The Preliminary Case that this Facility is being considered under', on_delete=django.db.models.deletion.CASCADE, related_name='pfacilities', to='cases.PreliminaryCase')),
                ('propagation_study', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='propagation_study_for_pfacilities', to='cases.Attachment')),
            ],
            options={
                'verbose_name': 'Preliminary Facility',
                'verbose_name_plural': 'Preliminary Facilities',
            },
        ),
        migrations.CreateModel(
            name='PreliminaryCaseGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True, null=True)),
                ('data_source', models.CharField(choices=[('web', 'Web'), ('excel', 'Excel'), ('access_prelim_technical', 'Access Prelim. Technical Table'), ('access_technical', 'Access Technical Table'), ('access_prelim_application', 'Access Prelim. Application Table'), ('access_application', 'Access Application Table'), ('nam_application', 'NRQZ Analyzer Application'), ('fcc_asr', 'FCC ASR Database')], default='web', help_text='The source that this object was created from', max_length=25)),
                ('comments', cases.models.SensibleTextField(blank=True)),
                ('model_import_attempt', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='django_import_data.ModelImportAttempt')),
            ],
            options={
                'verbose_name': 'Preliminary Case Group',
                'verbose_name_plural': 'Preliminary Case Groups',
            },
        ),
        migrations.AddField(
            model_name='preliminarycase',
            name='pcase_group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='prelim_cases', to='cases.PreliminaryCaseGroup'),
        ),
        migrations.CreateModel(
            name='Facility',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('original_created_on', models.DateTimeField(blank=True, null=True)),
                ('original_modified_on', models.DateTimeField(blank=True, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True, null=True)),
                ('data_source', models.CharField(choices=[('web', 'Web'), ('excel', 'Excel'), ('access_prelim_technical', 'Access Prelim. Technical Table'), ('access_technical', 'Access Technical Table'), ('access_prelim_application', 'Access Prelim. Application Table'), ('access_application', 'Access Application Table'), ('nam_application', 'NRQZ Analyzer Application'), ('fcc_asr', 'FCC ASR Database')], default='web', help_text='The source that this object was created from', max_length=25)),
                ('nrqz_id', cases.models.SensibleCharField(blank=True, db_index=True, default=None, help_text='Assigned by NRAO. Do not put any of your data in this column.', max_length=256, verbose_name='NRQZ ID')),
                ('site_num', models.PositiveIntegerField(blank=True, help_text='???', null=True, verbose_name='Site #')),
                ('freq_low', models.FloatField(blank=True, help_text='Frequency specific or lower part of band.', null=True, verbose_name='Freq Low (MHz)')),
                ('freq_high', models.FloatField(blank=True, help_text='Frequency specific or upper part of band.', null=True, verbose_name='Freq High (MHz)')),
                ('antenna_model_number', cases.models.SensibleCharField(blank=True, help_text='Antenna Model Number', max_length=256, verbose_name='Antenna Model No.')),
                ('latitude', cases.models.SensibleCharField(blank=True, help_text='Latitude of site, in degrees', max_length=256, verbose_name='Latitude')),
                ('longitude', cases.models.SensibleCharField(blank=True, help_text='Longitude of site, in degrees', max_length=256, verbose_name='Longitude')),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='A physical location on the Earth', null=True, srid=4326, verbose_name='Location')),
                ('location_description', cases.models.SensibleCharField(blank=True, help_text='A long-form description of the facility location', max_length=512, verbose_name='Geographic Location')),
                ('amsl', models.FloatField(blank=True, help_text='Facility ground elevation, in meters', null=True, verbose_name='AMSL (meters)')),
                ('agl', models.FloatField(blank=True, help_text='Facility height to center above ground level, in meters', null=True, verbose_name='AGL (meters)')),
                ('comments', cases.models.SensibleTextField(blank=True, help_text='Additional information or comments from the applicant', verbose_name='Comments')),
                ('usgs_dataset', cases.models.SensibleCharField(blank=True, choices=[('3m', '3m'), ('10m', '10m'), ('30m', '30m')], max_length=3, verbose_name='USGS Dataset')),
                ('tpa', models.FloatField(blank=True, null=True, verbose_name='TPA')),
                ('survey_1a', models.BooleanField(blank=True, null=True, verbose_name='Survey 1A')),
                ('survey_2c', models.BooleanField(blank=True, null=True, verbose_name='Survey 2C')),
                ('radio_service', cases.models.SensibleCharField(blank=True, max_length=256, verbose_name='Radio Service')),
                ('topo_4_point', models.BooleanField(blank=True, null=True, verbose_name='FCC 4 Point')),
                ('topo_12_point', models.BooleanField(blank=True, null=True, verbose_name='Weighted 12 Point')),
                ('propagation_model', cases.models.SensibleCharField(blank=True, default='Rounded Obstacle', max_length=256, verbose_name='Propagation Model')),
                ('nrao_aerpd_cdma', models.FloatField(blank=True, null=True)),
                ('nrao_aerpd_cdma2000', models.FloatField(blank=True, null=True)),
                ('nrao_aerpd_gsm', models.FloatField(blank=True, null=True)),
                ('nrao_aerpd_analog', models.FloatField(blank=True, null=True)),
                ('nrao_diff', models.FloatField(blank=True, null=True)),
                ('nrao_space', models.FloatField(blank=True, null=True)),
                ('nrao_tropo', models.FloatField(blank=True, null=True)),
                ('original_outside_nrqz', models.BooleanField(blank=True, null=True)),
                ('az_bearing', cases.models.SensibleCharField(blank=True, help_text='The Azimuth bearing between the Facility and the GBT, as imported from existing data', max_length=256, verbose_name='AZ bearing degrees True')),
                ('site_name', cases.models.SensibleCharField(blank=True, help_text='What you call it! Include MCN and eNB information.', max_length=256, verbose_name='Site Name')),
                ('call_sign', cases.models.SensibleCharField(blank=True, help_text='The radio call sign of the Facility', max_length=256, verbose_name='Call Sign')),
                ('fcc_file_number', cases.models.SensibleCharField(blank=True, help_text='???', max_length=256, verbose_name='FCC ULS Number')),
                ('bandwidth', models.FloatField(blank=True, help_text='Minimum utilized per TX (i.e. 11K0F0E is a value of 0.011)', null=True, verbose_name='Bandwidth (MHz)')),
                ('antenna_gain', models.FloatField(blank=True, null=True, verbose_name='Antenna Gain (dBi)')),
                ('system_loss', models.FloatField(blank=True, null=True, verbose_name='System Loss (dB)')),
                ('main_beam_orientation', cases.models.SensibleCharField(blank=True, help_text='or sectorized AZ bearings (in ° True NOT ° Magnetic)', max_length=256, verbose_name='Main Beam Orientation')),
                ('mechanical_downtilt', cases.models.SensibleCharField(blank=True, max_length=256, verbose_name='Mechanical Downtilt')),
                ('electrical_downtilt', cases.models.SensibleCharField(blank=True, help_text='Specific and/or RET range', max_length=256, verbose_name='Electrical Downtilt')),
                ('tx_per_sector', cases.models.SensibleCharField(blank=True, help_text="(or No. of RRH's ports with feed power", max_length=256, verbose_name='Total number of TXers per sector')),
                ('band_allowance', models.FloatField(blank=True, null=True, verbose_name='Band Allowance')),
                ('distance_to_first_obstacle', cases.models.SensibleCharField(blank=True, max_length=256, verbose_name='Distance to First Obstacle')),
                ('dominant_path', cases.models.SensibleCharField(blank=True, choices=[('diffraction', 'Diffraction'), ('scatter', 'Scatter'), ('free_space', 'Free Space')], max_length=256, verbose_name='Dominant Path')),
                ('height_of_first_obstacle', models.FloatField(blank=True, null=True, verbose_name='Height of First Obstacle (ft)')),
                ('max_aerpd', models.FloatField(blank=True, null=True, verbose_name='Max AERPd (dBm)')),
                ('max_eirp', models.FloatField(blank=True, null=True, verbose_name='Max AEiRP')),
                ('requested_max_erp_per_tx', models.FloatField(blank=True, null=True, verbose_name='Max ERP per TX (W)')),
                ('max_gain', models.FloatField(blank=True, null=True, verbose_name='Max Gain (dBi)')),
                ('max_tx_power', models.FloatField(blank=True, null=True, verbose_name='Max TX Pwr (W)')),
                ('nrao_aerpd', models.FloatField(blank=True, null=True, verbose_name='NRAO AERPd (W)')),
                ('power_density_limit', models.FloatField(blank=True, null=True, verbose_name='Power Density Limit')),
                ('sgrs_approval', models.BooleanField(blank=True, null=True, verbose_name='SGRS Approval')),
                ('sgrs_responded_on', models.DateTimeField(blank=True, null=True, verbose_name='SGRS Responded On')),
                ('tap_file', cases.models.SensibleCharField(blank=True, max_length=256)),
                ('tx_power', models.FloatField(blank=True, null=True, verbose_name='TX Power (dBm)')),
                ('aeirp_to_gbt', models.FloatField(blank=True, null=True, verbose_name='AEiRP to GBT')),
                ('si_done', models.DateField(blank=True, null=True, verbose_name='SI Done')),
                ('num_tx_per_facility', models.IntegerField(blank=True, null=True, verbose_name='# of TX per facility')),
                ('meets_erpd_limit', models.BooleanField(blank=True, help_text='Indicates whether NRAO approves of this Facility or not', null=True, verbose_name='Meets NRAO ERPd Limit')),
                ('emissions', django.contrib.postgres.fields.ArrayField(base_field=cases.models.SensibleCharField(default=None, max_length=64), blank=True, null=True, size=None)),
                ('s367', models.BooleanField(default=False)),
                ('attachments', models.ManyToManyField(blank=True, related_name='facilities', to='cases.Attachment')),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='facilities', to='cases.Case')),
                ('model_import_attempt', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='django_import_data.ModelImportAttempt')),
                ('original_srs', models.ForeignKey(help_text='The spatial reference system of the original imported coordinates', on_delete=django.db.models.deletion.PROTECT, to='gis.PostGISSpatialRefSys', verbose_name='Original Spatial Reference System')),
                ('propagation_study', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='propagation_study_for_facilities', to='cases.Attachment')),
                ('structure', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='facilities', to='cases.Structure')),
            ],
            options={
                'verbose_name': 'Facility',
                'verbose_name_plural': 'Facilities',
            },
        ),
        migrations.AddField(
            model_name='case',
            name='applicant',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='applicant_for_cases', to='cases.Person'),
        ),
        migrations.AddField(
            model_name='case',
            name='attachments',
            field=models.ManyToManyField(blank=True, related_name='cases', to='cases.Attachment'),
        ),
        migrations.AddField(
            model_name='case',
            name='contact',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contact_for_cases', to='cases.Person'),
        ),
        migrations.AddField(
            model_name='case',
            name='model_import_attempt',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='django_import_data.ModelImportAttempt'),
        ),
    ]
