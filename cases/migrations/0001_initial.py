# Generated by Django 2.1.5 on 2019-02-04 19:40

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('django_import_data', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AlsoKnownAs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True, null=True)),
                ('data_source', models.CharField(choices=[('web', 'Web'), ('excel', 'Excel'), ('access_prelim_technical', 'Access Prelim. Technical Table'), ('access_technical', 'Access Technical Table'), ('access_prelim_application', 'Access Prelim. Application Table'), ('access_application', 'Access Application Table'), ('nam_application', 'NRQZ Analyzer Application')], help_text='The source that this object was created from', max_length=25)),
                ('name', models.CharField(max_length=256)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True, null=True)),
                ('data_source', models.CharField(choices=[('web', 'Web'), ('excel', 'Excel'), ('access_prelim_technical', 'Access Prelim. Technical Table'), ('access_technical', 'Access Technical Table'), ('access_prelim_application', 'Access Prelim. Application Table'), ('access_application', 'Access Application Table'), ('nam_application', 'NRQZ Analyzer Application')], help_text='The source that this object was created from', max_length=25)),
                ('path', models.CharField(max_length=256, unique=True)),
                ('comments', models.TextField()),
                ('model_import_attempt', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='django_import_data.ModelImportAttempt')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Case',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('original_created_on', models.DateTimeField(blank=True, null=True)),
                ('original_modified_on', models.DateTimeField(blank=True, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True, null=True)),
                ('data_source', models.CharField(choices=[('web', 'Web'), ('excel', 'Excel'), ('access_prelim_technical', 'Access Prelim. Technical Table'), ('access_technical', 'Access Technical Table'), ('access_prelim_application', 'Access Prelim. Application Table'), ('access_application', 'Access Application Table'), ('nam_application', 'NRQZ Analyzer Application')], help_text='The source that this object was created from', max_length=25)),
                ('comments', models.TextField(blank=True)),
                ('case_num', models.PositiveIntegerField(db_index=True, unique=True, verbose_name='Case Num.')),
                ('name', models.CharField(blank=True, max_length=256, null=True)),
                ('completed', models.BooleanField(blank=True, default=False, verbose_name='Completed')),
                ('shutdown', models.BooleanField(blank=True, default=False, verbose_name='Shut Down')),
                ('completed_on', models.DateTimeField(blank=True, null=True, verbose_name='Completed On')),
                ('sgrs_notify', models.BooleanField(blank=True, default=False, verbose_name='SGRS Notified')),
                ('sgrs_notified_on', models.DateTimeField(blank=True, null=True, verbose_name='SGRS Notified On')),
                ('radio_service', models.CharField(blank=True, max_length=256, verbose_name='Radio Service')),
                ('call_sign', models.CharField(blank=True, max_length=256, verbose_name='Call Sign')),
                ('freq_coord', models.CharField(blank=True, max_length=256, verbose_name='Freq. Coord.')),
                ('fcc_file_num', models.CharField(blank=True, max_length=256, verbose_name='FCC File Num.')),
                ('num_freqs', models.PositiveIntegerField(blank=True, null=True, verbose_name='Num. Freq.')),
                ('num_sites', models.PositiveIntegerField(blank=True, null=True, verbose_name='Num Sites')),
                ('num_outside', models.PositiveIntegerField(blank=True, null=True, verbose_name='Num. Sites Outside NRQZ')),
                ('erpd_limit', models.BooleanField(blank=True, default=False, verbose_name='ERPD Limit')),
                ('si_waived', models.BooleanField(blank=True, default=False, verbose_name='SI Waived')),
                ('si', models.BooleanField(blank=True, default=False, verbose_name='SI')),
                ('si_done', models.DateTimeField(blank=True, null=True, verbose_name='SI Done')),
                ('slug', models.SlugField(unique=True)),
            ],
            options={
                'verbose_name': 'Case',
                'verbose_name_plural': 'Cases',
            },
        ),
        migrations.CreateModel(
            name='Facility',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('original_created_on', models.DateTimeField(blank=True, null=True)),
                ('original_modified_on', models.DateTimeField(blank=True, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True, null=True)),
                ('data_source', models.CharField(choices=[('web', 'Web'), ('excel', 'Excel'), ('access_prelim_technical', 'Access Prelim. Technical Table'), ('access_technical', 'Access Technical Table'), ('access_prelim_application', 'Access Prelim. Application Table'), ('access_application', 'Access Application Table'), ('nam_application', 'NRQZ Analyzer Application')], help_text='The source that this object was created from', max_length=25)),
                ('freq_low', models.FloatField(blank=True, help_text='Frequency specific or lower part of band.', null=True, verbose_name='Freq Low (MHz)')),
                ('site_name', models.CharField(blank=True, help_text='What you call it! Include MCN and eNB information.', max_length=256, null=True, verbose_name='Site Name')),
                ('call_sign', models.CharField(blank=True, help_text='(optional)', max_length=256, null=True, verbose_name='Call Sign')),
                ('fcc_file_number', models.CharField(blank=True, help_text='(if known)', max_length=256, null=True, verbose_name='FCC File Number')),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326)),
                ('latitude', models.CharField(blank=True, help_text='Latitude of site, in degrees', max_length=256, null=True, verbose_name='Latitude')),
                ('longitude', models.CharField(blank=True, help_text='Longitude of site, in degrees', max_length=256, null=True, verbose_name='Longitude')),
                ('amsl', models.FloatField(blank=True, help_text='Ground elevation', null=True, verbose_name='AMSL (meters)')),
                ('agl', models.FloatField(blank=True, help_text='Facility height to center above ground level', null=True, verbose_name='AGL (meters)')),
                ('freq_high', models.FloatField(blank=True, help_text='Frequency specific or upper part of band.', null=True, verbose_name='Freq High (MHz)')),
                ('bandwidth', models.FloatField(blank=True, help_text='Minimum utilized per TX (i.e. 11K0F0E is a value of 0.011)', null=True, verbose_name='Bandwidth (MHz)')),
                ('max_output', models.FloatField(blank=True, help_text='Per Transmitter or RRH (remote radio head) polarization', null=True, verbose_name='Max Output Pwr (W)')),
                ('antenna_gain', models.FloatField(blank=True, null=True, verbose_name='Antenna Gain (dBi)')),
                ('system_loss', models.FloatField(blank=True, null=True, verbose_name='System Loss (dB)')),
                ('main_beam_orientation', models.CharField(blank=True, help_text='or sectorized AZ bearings (in ° True NOT ° Magnetic)', max_length=256, verbose_name='Main Beam Orientation')),
                ('mechanical_downtilt', models.CharField(blank=True, max_length=256, null=True, verbose_name='Mechanical Downtilt')),
                ('electrical_downtilt', models.CharField(blank=True, help_text='Specific and/or RET range', max_length=256, verbose_name='Electrical Downtilt Sector')),
                ('antenna_model_number', models.CharField(blank=True, max_length=256, null=True, verbose_name='Antenna Model No.')),
                ('nrqz_id', models.CharField(blank=True, db_index=True, help_text='Assigned by NRAO. Do not put any of your data in this column.', max_length=256, null=True, verbose_name='NRQZ ID')),
                ('tx_per_sector', models.CharField(blank=True, help_text="(or No. of RRH's ports with feed power", max_length=256, verbose_name='Total number of TXers per sector')),
                ('tx_antennas_per_sector', models.CharField(blank=True, max_length=256, verbose_name='Number of transmitting antennas per sector')),
                ('technology', models.CharField(blank=True, help_text='i.e.  FM, 2G, 3G, 4G, GSM, LTE, UMTS, CDMA2000 (specify other)', max_length=256, null=True)),
                ('uses_split_sectorization', models.BooleanField(blank=True, default=False, help_text='or dual-beam sectorization', null=True, verbose_name='This facility uses split sectorization')),
                ('uses_cross_polarization', models.BooleanField(blank=True, default=False, null=True, verbose_name='This facility uses Cross polarization ')),
                ('uses_quad_or_octal_polarization', models.BooleanField(blank=True, default=False, null=True, verbose_name='This facility uses Quad or Octal polarization')),
                ('num_quad_or_octal_ports_with_feed_power', models.PositiveIntegerField(blank=True, null=True, verbose_name='Number of Quad or Octal ports with feed power')),
                ('tx_power_pos_45', models.FloatField(blank=True, null=True, verbose_name='Max TX output PWR at +45 degrees')),
                ('tx_power_neg_45', models.FloatField(blank=True, null=True, verbose_name='Max TX output PWR at -45 degrees')),
                ('asr_is_from_applicant', models.BooleanField(blank=True, null=True)),
                ('comments', models.TextField(blank=True, help_text='Additional information or comments from the applicant', null=True)),
                ('band_allowance', models.FloatField(blank=True, null=True, verbose_name='Band Allowance')),
                ('distance_to_first_obstacle', models.CharField(blank=True, max_length=256, null=True, verbose_name='Distance to First Obstacle')),
                ('dominant_path', models.CharField(blank=True, max_length=256, verbose_name='Dominant Path')),
                ('erpd_per_num_tx', models.CharField(blank=True, max_length=256, verbose_name='ERPd per # of Transmitters')),
                ('height_of_first_obstacle', models.FloatField(blank=True, null=True, verbose_name='Height of First Obstacle (ft)')),
                ('loc', models.CharField(blank=True, max_length=256, verbose_name='LOC')),
                ('max_aerpd', models.FloatField(blank=True, null=True, verbose_name='Max AERPd (dBm)')),
                ('max_erp_per_tx', models.FloatField(blank=True, null=True, verbose_name='Max ERP per TX (W)')),
                ('max_gain', models.FloatField(blank=True, null=True, verbose_name='Max Gain (dBi)')),
                ('max_tx_power', models.FloatField(blank=True, null=True, verbose_name='Max TX Pwr (W)')),
                ('nrao_aerpd', models.FloatField(blank=True, null=True, verbose_name='NRAO AERPd (W)')),
                ('power_density_limit', models.FloatField(blank=True, null=True, verbose_name='Power Density Limit')),
                ('sgrs_approval', models.BooleanField(blank=True, null=True)),
                ('tap_file', models.CharField(blank=True, max_length=256)),
                ('tap', models.CharField(blank=True, max_length=256)),
                ('tx_power', models.FloatField(blank=True, null=True, verbose_name='TX Power (dBm)')),
                ('aeirp_to_gbt', models.FloatField(blank=True, null=True, verbose_name='AEiRP to GBT')),
                ('az_bearing', models.CharField(blank=True, max_length=256, null=True, verbose_name='AZ bearing degrees True')),
                ('calc_az', models.FloatField(blank=True, null=True)),
                ('num_tx_per_facility', models.IntegerField(blank=True, null=True, verbose_name='# of TX per facility')),
                ('site_num', models.PositiveIntegerField(blank=True, null=True, verbose_name='Site #')),
                ('nrao_approval', models.BooleanField(blank=True, help_text='Indicates whether NRAO approves of this Facility or not', null=True)),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='facilities', to='cases.Case')),
                ('model_import_attempt', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='django_import_data.ModelImportAttempt')),
            ],
            options={
                'verbose_name': 'Facility',
                'verbose_name_plural': 'Facilities',
            },
        ),
        migrations.CreateModel(
            name='LetterTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=256, unique=True)),
                ('path', models.FilePathField(max_length=512, path='/home/sandboxes/tchamber/repos/nrqz_admin/letter_templates', unique=True)),
            ],
            options={
                'verbose_name': 'Letter Template',
                'verbose_name_plural': 'Letter Templates',
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True, null=True)),
                ('data_source', models.CharField(choices=[('web', 'Web'), ('excel', 'Excel'), ('access_prelim_technical', 'Access Prelim. Technical Table'), ('access_technical', 'Access Technical Table'), ('access_prelim_application', 'Access Prelim. Application Table'), ('access_application', 'Access Application Table'), ('nam_application', 'NRQZ Analyzer Application')], help_text='The source that this object was created from', max_length=25)),
                ('name', models.CharField(max_length=256)),
                ('phone', models.CharField(blank=True, max_length=256)),
                ('fax', models.CharField(blank=True, max_length=256)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('street', models.CharField(blank=True, max_length=256)),
                ('city', models.CharField(blank=True, max_length=256)),
                ('county', models.CharField(blank=True, max_length=256)),
                ('state', models.CharField(blank=True, max_length=256)),
                ('zipcode', models.CharField(blank=True, max_length=256)),
                ('comments', models.TextField(blank=True)),
                ('model_import_attempt', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='django_import_data.ModelImportAttempt')),
            ],
            options={
                'verbose_name_plural': 'People',
            },
        ),
        migrations.CreateModel(
            name='PreliminaryCase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('original_created_on', models.DateTimeField(blank=True, null=True)),
                ('original_modified_on', models.DateTimeField(blank=True, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True, null=True)),
                ('data_source', models.CharField(choices=[('web', 'Web'), ('excel', 'Excel'), ('access_prelim_technical', 'Access Prelim. Technical Table'), ('access_technical', 'Access Technical Table'), ('access_prelim_application', 'Access Prelim. Application Table'), ('access_application', 'Access Application Table'), ('nam_application', 'NRQZ Analyzer Application')], help_text='The source that this object was created from', max_length=25)),
                ('comments', models.TextField(blank=True)),
                ('case_num', models.PositiveIntegerField(db_index=True, unique=True, verbose_name='Prelim. Case Num.')),
                ('name', models.CharField(blank=True, max_length=256, null=True)),
                ('completed', models.BooleanField(blank=True, default=False, verbose_name='Completed')),
                ('completed_on', models.DateTimeField(blank=True, null=True, verbose_name='Completed On')),
                ('radio_service', models.CharField(blank=True, max_length=256, verbose_name='Radio Service')),
                ('num_freqs', models.PositiveIntegerField(blank=True, null=True, verbose_name='Num. Freq.')),
                ('num_sites', models.PositiveIntegerField(blank=True, null=True, verbose_name='Num Sites')),
                ('slug', models.SlugField(unique=True)),
                ('applicant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='applicant_for_prelim_cases', to='cases.Person')),
                ('attachments', models.ManyToManyField(blank=True, related_name='prelim_cases', to='cases.Attachment')),
                ('case', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='prelim_cases', to='cases.Case')),
                ('contact', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contact_for_prelim_cases', to='cases.Person')),
                ('model_import_attempt', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='django_import_data.ModelImportAttempt')),
            ],
            options={
                'verbose_name': 'Preliminary Case',
                'verbose_name_plural': 'Preliminary Cases',
            },
        ),
        migrations.CreateModel(
            name='PreliminaryCaseGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True, null=True)),
                ('data_source', models.CharField(choices=[('web', 'Web'), ('excel', 'Excel'), ('access_prelim_technical', 'Access Prelim. Technical Table'), ('access_technical', 'Access Technical Table'), ('access_prelim_application', 'Access Prelim. Application Table'), ('access_application', 'Access Application Table'), ('nam_application', 'NRQZ Analyzer Application')], help_text='The source that this object was created from', max_length=25)),
                ('comments', models.TextField(blank=True)),
                ('model_import_attempt', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='django_import_data.ModelImportAttempt')),
            ],
            options={
                'verbose_name': 'Preliminary Case Group',
                'verbose_name_plural': 'Preliminary Case Groups',
            },
        ),
        migrations.CreateModel(
            name='PreliminaryFacility',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('original_created_on', models.DateTimeField(blank=True, null=True)),
                ('original_modified_on', models.DateTimeField(blank=True, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True, null=True)),
                ('data_source', models.CharField(choices=[('web', 'Web'), ('excel', 'Excel'), ('access_prelim_technical', 'Access Prelim. Technical Table'), ('access_technical', 'Access Technical Table'), ('access_prelim_application', 'Access Prelim. Application Table'), ('access_application', 'Access Application Table'), ('nam_application', 'NRQZ Analyzer Application')], help_text='The source that this object was created from', max_length=25)),
                ('site_num', models.PositiveIntegerField(blank=True, null=True, verbose_name='Site #')),
                ('freq_low', models.FloatField(blank=True, help_text='Frequency specific or lower part of band.', null=True, verbose_name='Freq Low (MHz)')),
                ('antenna_model_number', models.CharField(blank=True, max_length=256, null=True, verbose_name='Antenna Model No.')),
                ('power_density_limit', models.FloatField(blank=True, null=True, verbose_name='Power Density Limit')),
                ('site_name', models.CharField(blank=True, help_text='What you call it! Include MCN and eNB information.', max_length=256, null=True, verbose_name='Site Name')),
                ('latitude', models.CharField(blank=True, help_text='Latitude of site, in degrees', max_length=256, null=True, verbose_name='Latitude')),
                ('longitude', models.CharField(blank=True, help_text='Longitude of site, in degrees', max_length=256, null=True, verbose_name='Longitude')),
                ('amsl', models.FloatField(blank=True, help_text='Ground elevation', null=True, verbose_name='AMSL (meters)')),
                ('agl', models.FloatField(blank=True, help_text='Facility height to center above ground level', null=True, verbose_name='AGL (meters)')),
                ('comments', models.TextField(blank=True, help_text='Additional information or comments from the applicant', null=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326)),
                ('model_import_attempt', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='django_import_data.ModelImportAttempt')),
                ('pcase', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pfacilities', to='cases.PreliminaryCase')),
            ],
            options={
                'verbose_name': 'Preliminary Facility',
                'verbose_name_plural': 'Preliminary Facilities',
            },
        ),
        migrations.CreateModel(
            name='Structure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True, null=True)),
                ('data_source', models.CharField(choices=[('web', 'Web'), ('excel', 'Excel'), ('access_prelim_technical', 'Access Prelim. Technical Table'), ('access_technical', 'Access Technical Table'), ('access_prelim_application', 'Access Prelim. Application Table'), ('access_application', 'Access Application Table'), ('nam_application', 'NRQZ Analyzer Application')], help_text='The source that this object was created from', max_length=25)),
                ('asr', models.PositiveIntegerField(db_index=True, unique=True, verbose_name='Antenna Registration Number')),
                ('file_num', models.CharField(max_length=256, verbose_name='File Number')),
                ('location', django.contrib.gis.db.models.fields.PointField(geography=True, srid=4326, verbose_name='Location')),
                ('faa_circ_num', models.CharField(max_length=256, verbose_name='FAA Circulation Number')),
                ('faa_study_num', models.CharField(max_length=256, verbose_name='FAA Study Number')),
                ('issue_date', models.DateField(verbose_name='Issue Date')),
                ('height', models.FloatField(verbose_name='Height (m)')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='preliminarycase',
            name='pcase_group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='prelim_cases', to='cases.PreliminaryCaseGroup'),
        ),
        migrations.AddField(
            model_name='facility',
            name='structure',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='facilities', to='cases.Structure'),
        ),
        migrations.AddField(
            model_name='case',
            name='applicant',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='applicant_for_cases', to='cases.Person'),
        ),
        migrations.AddField(
            model_name='case',
            name='attachments',
            field=models.ManyToManyField(blank=True, related_name='cases', to='cases.Attachment'),
        ),
        migrations.AddField(
            model_name='case',
            name='contact',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contact_for_cases', to='cases.Person'),
        ),
        migrations.AddField(
            model_name='case',
            name='model_import_attempt',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='django_import_data.ModelImportAttempt'),
        ),
        migrations.AddField(
            model_name='alsoknownas',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='aka', to='cases.Person'),
        ),
    ]
